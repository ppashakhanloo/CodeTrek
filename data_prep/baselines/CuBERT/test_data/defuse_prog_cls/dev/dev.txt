{"function": "\n\ndef test_no_transaction_create(self):\n    manifest = shippo.Manifest.create(**self.create_mock_manifest())\n    self.assertEqual(manifest.object_status, 'NOTRANSACTIONS')\n", "label": "used", "info": "defuse/dev/used/file_1128622.py"}
{"function": "\n\ndef find_all_tests(suite):\n    'Yields all the tests and their names from a given suite.'\n    suites = [suite]\n    while suites:\n        s = suites.pop()\n        try:\n            suites.extend(s)\n        except TypeError:\n            (yield (s, ('%s.%s.%s' % (s.__class__.__module__, s.__class__.__name__, s._testMethodName))))\n", "label": "used", "info": "defuse/dev/used/file_1128680.py"}
{"function": "\n\n@toolz.memoize\ndef table_of_metadata(metadata, name):\n    if (metadata.schema is not None):\n        name = '.'.join((metadata.schema, name))\n    if (name not in metadata.tables):\n        metadata.reflect(views=metadata.bind.dialect.supports_views)\n    return metadata.tables[name]\n", "label": "used", "info": "defuse/dev/used/file_1128672.py"}
{"function": "\n\ndef GetCodeTypeFromDictionary(self, def_dict):\n    \"Convert a json schema type to a suitable Java type name.\\n\\n    Overrides the default.\\n\\n    Args:\\n      def_dict: (dict) A dictionary describing Json schema for this Property.\\n    Returns:\\n      A name suitable for use as a class in the generator's target language.\\n    \"\n    json_type = def_dict.get('type', 'string')\n    json_format = def_dict.get('format')\n    datatype = self.TYPE_FORMAT_TO_DATATYPE.get((json_type, json_format))\n    if datatype:\n        native_format = datatype\n    else:\n        native_format = utilities.CamelCase(json_type)\n    return native_format\n", "label": "used", "info": "defuse/dev/used/file_1128642.py"}
{"function": "\n\ndef __init__(self, value, context):\n    self.value = value\n    super().__init__(context)\n", "label": "used", "info": "defuse/dev/used/file_1128632.py"}
{"function": "\n\n@utils.positional((1 + Property._positional))\ndef __init__(self, name=None, compressed=False, **kwds):\n    if compressed:\n        kwds.setdefault('indexed', False)\n    super(GenericProperty, self).__init__(name=name, **kwds)\n    self._compressed = compressed\n    if (compressed and self._indexed):\n        raise NotImplementedError(('GenericProperty %s cannot be compressed and indexed at the same time.' % self._name))\n", "label": "used", "info": "defuse/dev/used/file_1128630.py"}
{"function": "\n\ndef install_os(path=None, **kwargs):\n    \"\\n    Installs the given image on the device. After the installation is complete the device is rebooted,\\n    if reboot=True is given as a keyworded argument.\\n\\n    Usage:\\n\\n    .. code-block:: bash\\n\\n        salt 'device_name' junos.install_os '/home/user/junos_image.tgz' reboot=True\\n\\n\\n    Options\\n      * path: Path where the image file is present.\\n      * kwargs: keyworded arguments to be given such as timeout, reboot etc\\n\\n    \"\n    conn = __proxy__['junos.conn']()\n    ret = dict()\n    ret['out'] = True\n    if ('timeout' in kwargs):\n        conn.timeout = kwargs['timeout']\n    try:\n        install = conn.sw.install(path, progress=True)\n        ret['message'] = 'Installed the os.'\n    except Exception as exception:\n        ret['message'] = 'Installation failed due to : \"{0}\"'.format(exception)\n        ret['out'] = False\n    if (('reboot' in kwargs) and (kwargs['reboot'] is True)):\n        rbt = conn.sw.reboot()\n        ret['message'] = 'Successfully installed and rebooted!'\n    return ret\n", "label": "unused", "info": "defuse/dev/unused/file_1130462.py"}
{"function": "\n\ndef __init__(self, name, owner):\n    super(InPort, self).__init__(name, owner)\n    self.fifo.add_reader(self.id)\n    self.endpoint = endpoint.Endpoint(self)\n", "label": "used", "info": "defuse/dev/used/file_1130400.py"}
{"function": "\n\ndef test_formset_instance(self):\n    request = get_request()\n    (the_instance1, created) = User.objects.get_or_create(username='testuser1')\n    (the_instance2, created) = User.objects.get_or_create(username='testuser2')\n    testform = TestWizard.as_view([('start', UserFormSet), ('step2', Step2)], instance_dict={\n        'start': User.objects.filter(username='testuser1'),\n    })\n    (response, instance) = testform(request)\n    self.assertEqual(list(instance.get_form_instance('start')), [the_instance1])\n    self.assertEqual(instance.get_form_instance('non_exist_instance'), None)\n    self.assertEqual(instance.get_form().initial_form_count(), 1)\n", "label": "unused", "info": "defuse/dev/unused/file_1133172.py"}
