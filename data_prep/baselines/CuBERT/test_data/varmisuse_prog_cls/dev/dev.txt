{"function": "\n\n@classmethod\ndef schema_from_record(cls, record):\n    'Given a dict representing a record instance to be inserted into\\n        BigQuery, calculate the schema.\\n\\n        Parameters\\n        ----------\\n        record : dict\\n            representing a record to be inserted into big query,\\n            where all keys are ``str`` objects (representing column names in\\n            the record) and all values are of type ``int``, ``str``,\\n            ``unicode``, ``float``, ``bool``, ``datetime``, or ``dict``. A\\n            ``dict`` value represents a record, and must conform to the same\\n            restrictions as record.\\n\\n        Returns\\n        -------\\n        list\\n            BigQuery schema\\n\\n        Notes\\n        -----\\n        Results are undefined if a different value type is provided for a\\n        repeated field: E.g.\\n\\n        >>> { rfield: [ { x: 1}, {x: \"a string\"} ] } # undefined!\\n        '\n    from bigquery.schema_builder import schema_from_record\n    return schema_from_record(record)\n", "label": "correct", "info": "dataset/ETHPy150Open tylertreat/BigQuery-Python/bigquery/client.py BigQueryClient.schema_from_record/original"}
{"function": "\n\n@classmethod\ndef schema_from_record(cls, record):\n    'Given a dict representing a record instance to be inserted into\\n        BigQuery, calculate the schema.\\n\\n        Parameters\\n        ----------\\n        record : dict\\n            representing a record to be inserted into big query,\\n            where all keys are ``str`` objects (representing column names in\\n            the record) and all values are of type ``int``, ``str``,\\n            ``unicode``, ``float``, ``bool``, ``datetime``, or ``dict``. A\\n            ``dict`` value represents a record, and must conform to the same\\n            restrictions as record.\\n\\n        Returns\\n        -------\\n        list\\n            BigQuery schema\\n\\n        Notes\\n        -----\\n        Results are undefined if a different value type is provided for a\\n        repeated field: E.g.\\n\\n        >>> { rfield: [ { x: 1}, {x: \"a string\"} ] } # undefined!\\n        '\n    from bigquery.schema_builder import schema_from_record\n    return schema_from_record(cls)\n", "label": "misuse", "info": "dataset/ETHPy150Open tylertreat/BigQuery-Python/bigquery/client.py BigQueryClient.schema_from_record/VarMisuse@27/332 `record`->`cls`"}
{"function": "\n\ndef save_model(model):\n    with open('model.pkl', 'wb') as f:\n        cPickle.dump(model, f, cPickle.HIGHEST_PROTOCOL)\n", "label": "correct", "info": "dataset/ETHPy150Open Cysu/dlearn/examples/mnist_lenet5.py save_model/original"}
{"function": "\n\ndef save_model(model):\n    with open('model.pkl', 'wb') as f:\n        cPickle.dump(f, f, cPickle.HIGHEST_PROTOCOL)\n", "label": "misuse", "info": "dataset/ETHPy150Open Cysu/dlearn/examples/mnist_lenet5.py save_model/VarMisuse@26/36 `model`->`f`"}
{"function": "\n\n@jit\ndef rotT_loops(T, g):\n\n    def compute_elt(i, j, k, l):\n        total = 0\n        for ii in range(3):\n            for jj in range(3):\n                for kk in range(3):\n                    for ll in range(3):\n                        gg = (((g[(ii, i)] * g[(jj, j)]) * g[(kk, k)]) * g[(ll, l)])\n                        total += (gg * T[(ii, jj, kk, ll)])\n        return total\n    return np.array([[[[compute_elt(i, j, k, l) for i in xrange(3)] for j in xrange(3)] for k in xrange(3)] for l in xrange(3)])\n", "label": "correct", "info": "dataset/ETHPy150Open iskandr/parakeet/examples/tensor_rotation.py rotT_loops/original"}
{"function": "\n\n@jit\ndef rotT_loops(T, g):\n\n    def compute_elt(i, j, k, l):\n        total = 0\n        for ii in range(3):\n            for jj in range(3):\n                for kk in range(3):\n                    for ll in range(3):\n                        gg = (((g[(ii, i)] * g[(jj, j)]) * g[(kk, k)]) * g[(ll, l)])\n                        total += (gg * T[(ii, jj, kk, ll)])\n        return total\n    return np.array([[[[compute_elt(T, j, k, l) for i in xrange(3)] for j in xrange(3)] for k in xrange(3)] for l in xrange(3)])\n", "label": "misuse", "info": "dataset/ETHPy150Open iskandr/parakeet/examples/tensor_rotation.py rotT_loops/VarMisuse@156/168 `i`->`T`"}
{"function": "\n\ndef replace_repository_references(self, line):\n    if (self._repo_hosting is None):\n        self._repo_hosting = False\n        try:\n            self._determine_repo_hosting()\n        except RuntimeError:\n            pass\n    if (self._repo_hosting == 'github'):\n        line = self._replace_github_issue_references(line)\n    return line\n", "label": "correct", "info": "dataset/ETHPy150Open ros-infrastructure/catkin_pkg/src/catkin_pkg/changelog_generator_vcs.py GitClient.replace_repository_references/original"}
{"function": "\n\ndef replace_repository_references(self, line):\n    if (self._repo_hosting is None):\n        self._repo_hosting = False\n        try:\n            self._determine_repo_hosting()\n        except RuntimeError:\n            pass\n    if (self._repo_hosting == 'github'):\n        line = self._replace_github_issue_references(line)\n    return self\n", "label": "misuse", "info": "dataset/ETHPy150Open ros-infrastructure/catkin_pkg/src/catkin_pkg/changelog_generator_vcs.py GitClient.replace_repository_references/VarMisuse@71/98 `line`->`self`"}
{"function": "\n\ndef query(self, *entities, **filter_by):\n    if (entities and isinstance(entities[0], LogicalConnective)):\n        q = self.g.query(self.element_cls)\n        return q.filter(entities[0]).filter_by(**filter_by)\n    else:\n        return self.g.query(self.element_cls, *entities).filter_by(**filter_by)\n", "label": "correct", "info": "dataset/ETHPy150Open mogui/pyorient/pyorient/ogm/broker.py Broker.query/original"}
{"function": "\n\ndef query(self, *entities, **filter_by):\n    if (entities and isinstance(entities[0], LogicalConnective)):\n        q = self.g.query(self.element_cls)\n        return q.filter(entities[0]).filter_by(**self)\n    else:\n        return self.g.query(self.element_cls, *entities).filter_by(**filter_by)\n", "label": "misuse", "info": "dataset/ETHPy150Open mogui/pyorient/pyorient/ogm/broker.py Broker.query/VarMisuse@60/69 `filter_by`->`self`"}
