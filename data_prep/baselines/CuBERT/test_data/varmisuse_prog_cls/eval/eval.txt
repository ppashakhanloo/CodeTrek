{"function": "\n\ndef test_login():\n    app = TestApp(application())\n    app = TestApp(application())\n    response = app.post('/login', {\n        'nickname': 'foo',\n    })\n    res = str(response)\n    assert ('SID=' in res)\n    assert ('user=\"foo' in res)\n    assert ('atime=' in res)\n", "label": "correct", "info": "dataset/ETHPy150Open aht/suas/suas/test/test_session.py test_login/original"}
{"function": "\n\ndef test_login():\n    app = TestApp(application())\n    app = TestApp(application())\n    response = app.post('/login', {\n        'nickname': 'foo',\n    })\n    res = str(res)\n    assert ('SID=' in res)\n    assert ('user=\"foo' in res)\n    assert ('atime=' in res)\n", "label": "misuse", "info": "dataset/ETHPy150Open aht/suas/suas/test/test_session.py test_login/VarMisuse@49/59 `response`->`res`"}
{"function": "\n\ndef upload_file_obj(self, file_obj, remote_path):\n    self.ssh_client.scp((file_obj,), target=remote_path)\n", "label": "correct", "info": "dataset/ETHPy150Open swayf/proxmoxer/proxmoxer/backends/openssh.py ProxmoxOpenSSHSession.upload_file_obj/original"}
{"function": "\n\ndef upload_file_obj(self, file_obj, remote_path):\n    self.ssh_client.scp((self,), target=remote_path)\n", "label": "misuse", "info": "dataset/ETHPy150Open swayf/proxmoxer/proxmoxer/backends/openssh.py ProxmoxOpenSSHSession.upload_file_obj/VarMisuse@21/30 `file_obj`->`self`"}
{"function": "\n\n@property\ndef rows(self):\n    product_availability = []\n    if self.config['org_summary']:\n        product_availability = ProductAvailabilityData.objects.filter(date__range=(self.config['startdate'], self.config['enddate']), location_id=self.config['org_summary'][0].location_id, product__in=self.config['products']).values('product').annotate(with_stock=Avg('with_stock'), without_data=Avg('without_data'), without_stock=Avg('without_stock'), total=Max('total'))\n    return product_availability\n", "label": "correct", "info": "dataset/ETHPy150Open dimagi/commcare-hq/custom/ilsgateway/tanzania/reports/mixins.py ProductAvailabilitySummary.rows/original"}
{"function": "\n\n@property\ndef rows(self):\n    product_availability = []\n    if self.config['org_summary']:\n        product_availability = ProductAvailabilityData.objects.filter(date__range=(self.config['startdate'], self.config['enddate']), location_id=self.config['org_summary'][0].location_id, product__in=product_availability.config['products']).values('product').annotate(with_stock=Avg('with_stock'), without_data=Avg('without_data'), without_stock=Avg('without_stock'), total=Max('total'))\n    return product_availability\n", "label": "misuse", "info": "dataset/ETHPy150Open dimagi/commcare-hq/custom/ilsgateway/tanzania/reports/mixins.py ProductAvailabilitySummary.rows/VarMisuse@70/100 `self`->`product_availability`"}
{"function": "\n\ndef get_dropout(subject, xfmname, power=20):\n    'Create a dropout Volume showing where EPI signal\\n    is very low.\\n    '\n    xfm = db.get_xfm(subject, xfmname)\n    rawdata = xfm.reference.get_data().T\n    if (rawdata.ndim > 3):\n        rawdata = rawdata.mean(0)\n    rawdata[(rawdata == 0)] = np.mean(rawdata[(rawdata != 0)])\n    normdata = ((rawdata - rawdata.min()) / (rawdata.max() - rawdata.min()))\n    normdata = ((1 - normdata) ** power)\n    from .dataset import Volume\n    return Volume(normdata, subject, xfmname)\n", "label": "correct", "info": "dataset/ETHPy150Open gallantlab/pycortex/cortex/utils.py get_dropout/original"}
{"function": "\n\ndef get_dropout(subject, xfmname, power=20):\n    'Create a dropout Volume showing where EPI signal\\n    is very low.\\n    '\n    xfm = db.get_xfm(subject, xfmname)\n    rawdata = xfm.reference.get_data().T\n    if (rawdata.ndim > 3):\n        rawdata = rawdata.mean(0)\n    rawdata[(xfmname == 0)] = np.mean(rawdata[(rawdata != 0)])\n    normdata = ((rawdata - rawdata.min()) / (rawdata.max() - rawdata.min()))\n    normdata = ((1 - normdata) ** power)\n    from .dataset import Volume\n    return Volume(normdata, subject, xfmname)\n", "label": "misuse", "info": "dataset/ETHPy150Open gallantlab/pycortex/cortex/utils.py get_dropout/VarMisuse@65/110 `rawdata`->`xfmname`"}
{"function": "\n\ndef test_deprecated_python_archive_option(self):\n    job = MROSWalkJob(['-r', 'local', '--python-archive', self.foo_tar_gz])\n    job.sandbox()\n    with job.make_runner() as r:\n        r.run()\n        path_to_size = dict((job.parse_output_line(line) for line in r.stream_output()))\n    self.assertEqual(path_to_size.get('./foo.tar.gz/foo.py'), (self.foo_py_size * 2))\n", "label": "correct", "info": "dataset/ETHPy150Open Yelp/mrjob/tests/test_runner.py SetupTestCase.test_deprecated_python_archive_option/original"}
{"function": "\n\ndef test_deprecated_python_archive_option(self):\n    job = MROSWalkJob(['-r', 'local', '--python-archive', self.foo_tar_gz])\n    job.sandbox()\n    with job.make_runner() as r:\n        r.run()\n        path_to_size = dict((r.parse_output_line(line) for line in r.stream_output()))\n    self.assertEqual(path_to_size.get('./foo.tar.gz/foo.py'), (self.foo_py_size * 2))\n", "label": "misuse", "info": "dataset/ETHPy150Open Yelp/mrjob/tests/test_runner.py SetupTestCase.test_deprecated_python_archive_option/VarMisuse@55/81 `job`->`r`"}
{"function": "\n\ndef accumulate_dict_from_superclasses(cls, propname):\n    cachename = ('__cached_all' + propname)\n    if (cachename not in cls.__dict__):\n        d = dict()\n        for c in inspect.getmro(cls):\n            if (issubclass(c, HasProps) and hasattr(c, propname)):\n                base = getattr(c, propname)\n                for (k, v) in base.items():\n                    if (k not in d):\n                        d[k] = v\n        setattr(cls, cachename, d)\n    return cls.__dict__[cachename]\n", "label": "correct", "info": "dataset/ETHPy150Open bokeh/bokeh/bokeh/core/properties.py accumulate_dict_from_superclasses/original"}
{"function": "\n\ndef accumulate_dict_from_superclasses(cls, propname):\n    cachename = ('__cached_all' + propname)\n    if (cachename not in cls.__dict__):\n        d = dict()\n        for c in inspect.getmro(cls):\n            if (issubclass(c, HasProps) and hasattr(c, propname)):\n                base = getattr(c, propname)\n                for (k, v) in k.items():\n                    if (k not in d):\n                        d[k] = v\n        setattr(cls, cachename, d)\n    return cls.__dict__[cachename]\n", "label": "misuse", "info": "dataset/ETHPy150Open bokeh/bokeh/bokeh/core/properties.py accumulate_dict_from_superclasses/VarMisuse@85/107 `base`->`k`"}
{"function": "\n\ndef test_inc_acc_increments_accum_rolls_over_and_sets_zero_flag(self):\n    mpu = self._make_mpu()\n    mpu.memory[0] = 26\n    mpu.a = 255\n    mpu.step()\n    self.assertEqual(1, mpu.pc)\n    self.assertEqual(0, mpu.a)\n    self.assertEqual(mpu.ZERO, (mpu.p & mpu.ZERO))\n    self.assertEqual(0, (mpu.p & mpu.NEGATIVE))\n", "label": "correct", "info": "dataset/ETHPy150Open mnaberez/py65/py65/tests/devices/test_mpu65c02.py MPUTests.test_inc_acc_increments_accum_rolls_over_and_sets_zero_flag/original"}
{"function": "\n\ndef test_inc_acc_increments_accum_rolls_over_and_sets_zero_flag(self):\n    mpu = self._make_mpu()\n    mpu.memory[0] = 26\n    mpu.a = 255\n    mpu.step()\n    self.assertEqual(1, mpu.pc)\n    self.assertEqual(0, self.a)\n    self.assertEqual(mpu.ZERO, (mpu.p & mpu.ZERO))\n    self.assertEqual(0, (mpu.p & mpu.NEGATIVE))\n", "label": "misuse", "info": "dataset/ETHPy150Open mnaberez/py65/py65/tests/devices/test_mpu65c02.py MPUTests.test_inc_acc_increments_accum_rolls_over_and_sets_zero_flag/VarMisuse@56/80 `mpu`->`self`"}
{"function": "\n\ndef title_method(self, document, sentences_count):\n    summarization_method = self._build_title_method_instance()\n    return summarization_method(document, sentences_count)\n", "label": "correct", "info": "dataset/ETHPy150Open miso-belica/sumy/sumy/summarizers/edmundson.py EdmundsonSummarizer.title_method/original"}
{"function": "\n\ndef title_method(self, document, sentences_count):\n    summarization_method = self._build_title_method_instance()\n    return summarization_method(self, sentences_count)\n", "label": "misuse", "info": "dataset/ETHPy150Open miso-belica/sumy/sumy/summarizers/edmundson.py EdmundsonSummarizer.title_method/VarMisuse@25/42 `document`->`self`"}
{"function": "\n\n@AffectTranslationX.setter\ndef AffectTranslationX(self, state):\n    self.component.PropertyList.Find('AffectTranslationX').Data = state\n", "label": "correct", "info": "dataset/ETHPy150Open CountZer0/PipelineConstructionSet/python/moBu/site-packages/PyMoBu-0.2/pymobu/components/constraints.py PMBParentChildConstraint.AffectTranslationX/original"}
{"function": "\n\n@AffectTranslationX.setter\ndef AffectTranslationX(self, state):\n    self.component.PropertyList.Find('AffectTranslationX').Data = self\n", "label": "misuse", "info": "dataset/ETHPy150Open CountZer0/PipelineConstructionSet/python/moBu/site-packages/PyMoBu-0.2/pymobu/components/constraints.py PMBParentChildConstraint.AffectTranslationX/VarMisuse@30/44 `state`->`self`"}
{"function": "\n\ndef _test_policy_rule_deleted_on_apic(self, shared=False):\n    pr = self._create_simple_policy_rule(shared=shared)\n    pr1 = self._create_simple_policy_rule('in', 'udp', 53, shared=shared)\n    self.delete_policy_rule(pr['id'], expected_res_status=204)\n    tenant = (self.common_tenant if shared else pr['tenant_id'])\n    mgr = self.driver.apic_manager\n    expected_calls = [mock.call(pr['id'], owner=tenant, transaction=mock.ANY), mock.call((amap.REVERSE_PREFIX + pr['id']), owner=tenant, transaction=mock.ANY)]\n    self._check_call_list(expected_calls, mgr.delete_tenant_filter.call_args_list)\n    mgr.delete_tenant_filter.reset_mock()\n    self.delete_policy_rule(pr1['id'], expected_res_status=204)\n    expected_calls = [mock.call(pr1['id'], owner=tenant, transaction=mock.ANY), mock.call((amap.REVERSE_PREFIX + pr1['id']), owner=tenant, transaction=mock.ANY)]\n    self._check_call_list(expected_calls, mgr.delete_tenant_filter.call_args_list)\n", "label": "correct", "info": "dataset/ETHPy150Open openstack/group-based-policy/gbpservice/neutron/tests/unit/services/grouppolicy/test_apic_mapping.py TestPolicyRule._test_policy_rule_deleted_on_apic/original"}
{"function": "\n\ndef _test_policy_rule_deleted_on_apic(self, shared=False):\n    pr = self._create_simple_policy_rule(shared=mgr)\n    pr1 = self._create_simple_policy_rule('in', 'udp', 53, shared=shared)\n    self.delete_policy_rule(pr['id'], expected_res_status=204)\n    tenant = (self.common_tenant if shared else pr['tenant_id'])\n    mgr = self.driver.apic_manager\n    expected_calls = [mock.call(pr['id'], owner=tenant, transaction=mock.ANY), mock.call((amap.REVERSE_PREFIX + pr['id']), owner=tenant, transaction=mock.ANY)]\n    self._check_call_list(expected_calls, mgr.delete_tenant_filter.call_args_list)\n    mgr.delete_tenant_filter.reset_mock()\n    self.delete_policy_rule(pr1['id'], expected_res_status=204)\n    expected_calls = [mock.call(pr1['id'], owner=tenant, transaction=mock.ANY), mock.call((amap.REVERSE_PREFIX + pr1['id']), owner=tenant, transaction=mock.ANY)]\n    self._check_call_list(expected_calls, mgr.delete_tenant_filter.call_args_list)\n", "label": "misuse", "info": "dataset/ETHPy150Open openstack/group-based-policy/gbpservice/neutron/tests/unit/services/grouppolicy/test_apic_mapping.py TestPolicyRule._test_policy_rule_deleted_on_apic/VarMisuse@22/34 `shared`->`mgr`"}
